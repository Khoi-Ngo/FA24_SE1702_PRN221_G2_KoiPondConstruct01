// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using KoiPondConstruction.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Memory;
namespace KoiPondConstruction.Data.DBContext;

public partial class FA24_SE1702_PRN221_G2_KoiPondConstructionContext : DbContext
{
    public FA24_SE1702_PRN221_G2_KoiPondConstructionContext()
    {
    }

    public FA24_SE1702_PRN221_G2_KoiPondConstructionContext(DbContextOptions<FA24_SE1702_PRN221_G2_KoiPondConstructionContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TblCustomerRequest> TblCustomerRequests { get; set; }

    public virtual DbSet<TblCustomerRequestDetail> TblCustomerRequestDetails { get; set; }

    public virtual DbSet<TblDesign> TblDesigns { get; set; }

    public virtual DbSet<TblFeedback> TblFeedbacks { get; set; }

    public virtual DbSet<TblImgRefer> TblImgRefers { get; set; }

    public virtual DbSet<TblInspection> TblInspections { get; set; }

    public virtual DbSet<TblInspectionDetail> TblInspectionDetails { get; set; }

    public virtual DbSet<TblPriceContractCost> TblPriceContractCosts { get; set; }

    public virtual DbSet<TblPriceRefer> TblPriceRefers { get; set; }

    public virtual DbSet<TblQuotationCost> TblQuotationCosts { get; set; }

    public virtual DbSet<TblRequestDetailSampleDesign> TblRequestDetailSampleDesigns { get; set; }

    public virtual DbSet<TblSampleDesign> TblSampleDesigns { get; set; }

    public virtual DbSet<TblStatus> TblStatuses { get; set; }

    public virtual DbSet<TblSuggestionDoc> TblSuggestionDocs { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    ////#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-8OR5KK86;Initial Catalog=FA24_SE1702_PRN221_G2_KoiPondConstruction;Persist Security Info=True;User ID=sa;Password=sa123;Encrypt=False");
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TblCustomerRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_cust__3213E83F9A4E4A53");

            entity.ToTable("tbl_customer_request");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("priority");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.TblCustomerRequests)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_customer_request_user_id");
        });

        modelBuilder.Entity<TblCustomerRequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_cust__3213E83F741C708F");

            entity.ToTable("tbl_customer_request_detail");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Budget).HasColumnName("budget");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.HomeownerDateOfBirth).HasColumnName("homeowner_date_of_birth");
            entity.Property(e => e.HomeownerFirstName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("homeowner_first_name");
            entity.Property(e => e.HomeownerLastName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("homeowner_last_name");
            entity.Property(e => e.HomeownerPhone)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("homeowner_phone");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Length).HasColumnName("length");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.Shape)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("shape");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Width).HasColumnName("width");

            entity.HasOne(d => d.Request).WithMany(p => p.TblCustomerRequestDetails)
                .HasForeignKey(d => d.RequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_customer_request_detail_request_id");
        });

        modelBuilder.Entity<TblDesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_design_id_primary");

            entity.ToTable("tbl_design");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApprovedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("approved_by");
            entity.Property(e => e.ApprovedTime)
                .HasColumnType("datetime")
                .HasColumnName("approved_time");
            entity.Property(e => e.ContentText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("content_text");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.File)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("file");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.RequestDetailId).HasColumnName("request_detail_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");

            entity.HasOne(d => d.RequestDetail).WithMany(p => p.TblDesigns)
                .HasForeignKey(d => d.RequestDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_design_request_detail_id");
        });

        modelBuilder.Entity<TblFeedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_feedback_id_primary");

            entity.ToTable("tbl_feedback");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AttachedFile)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("attached_file");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsSolved).HasColumnName("is_solved");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.TblFeedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_feedback_user_id");
        });

        modelBuilder.Entity<TblImgRefer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_img_refer_id_primary");

            entity.ToTable("tbl_img_refer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.DeletedTime)
                .HasColumnType("datetime")
                .HasColumnName("deleted_time");
            entity.Property(e => e.ImgUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("img_url");
        });

        modelBuilder.Entity<TblInspection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_insp__3213E83FD8BE19C1");

            entity.ToTable("tbl_inspection");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.DesignId).HasColumnName("design_id");
            entity.Property(e => e.Findings)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("findings");
            entity.Property(e => e.InspectionDate)
                .HasColumnType("datetime")
                .HasColumnName("inspection_date");
            entity.Property(e => e.InspectorId).HasColumnName("inspector_id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Recommendations)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("recommendations");
            entity.Property(e => e.Severity)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("severity");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.Design).WithMany(p => p.TblInspections)
                .HasForeignKey(d => d.DesignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_inspection_design_id");

            entity.HasOne(d => d.Inspector).WithMany(p => p.TblInspections)
                .HasForeignKey(d => d.InspectorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_inspection_inspector_id");
        });

        modelBuilder.Entity<TblInspectionDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_insp__3213E83F76653A97");

            entity.ToTable("tbl_inspection_detail");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Attribute)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("attribute");
            entity.Property(e => e.Comments)
                .HasColumnType("text")
                .HasColumnName("comments");
            entity.Property(e => e.ExpectedValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("expected_value");
            entity.Property(e => e.InspectionId).HasColumnName("inspection_id");
            entity.Property(e => e.ObservedValue)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observed_value");
            entity.Property(e => e.Result)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.Severity)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("severity");

            entity.HasOne(d => d.Inspection).WithMany(p => p.TblInspectionDetails)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_inspection_detail_inspection_id");
        });

        modelBuilder.Entity<TblPriceContractCost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_price_contract_cost_id_primary");

            entity.ToTable("tbl_price_contract_cost");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.PriceReferId).HasColumnName("price_refer_id");
            entity.Property(e => e.QuotationCostId).HasColumnName("quotation_cost_id");
            entity.Property(e => e.Total).HasColumnName("total");

            entity.HasOne(d => d.PriceRefer).WithMany(p => p.TblPriceContractCosts)
                .HasForeignKey(d => d.PriceReferId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_price_contract_cost_price_refer_id");

            entity.HasOne(d => d.QuotationCost).WithMany(p => p.TblPriceContractCosts)
                .HasForeignKey(d => d.QuotationCostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_price_contract_cost_quotation_cost_id");
        });

        modelBuilder.Entity<TblPriceRefer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_price_refer_id_primary");

            entity.ToTable("tbl_price_refer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.SizeUnit)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("size_unit");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("updated_by");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
        });

        modelBuilder.Entity<TblQuotationCost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_quotation_cost_id_primary");

            entity.ToTable("tbl_quotation_cost");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApprovedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("approved_by");
            entity.Property(e => e.ApprovedTime)
                .HasColumnType("datetime")
                .HasColumnName("approved_time");
            entity.Property(e => e.ContentText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("content_text");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.File)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("file");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.RequestDetailId).HasColumnName("request_detail_id");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");

            entity.HasOne(d => d.RequestDetail)
      .WithMany(p => p.TblQuotationCosts)
      .HasForeignKey(d => d.RequestDetailId)
      .OnDelete(DeleteBehavior.ClientSetNull)
      .HasConstraintName("fk_tbl_quotation_cost_request_detail_id");
        });

        modelBuilder.Entity<TblRequestDetailSampleDesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbl_requ__3213E83FCF6F6E36");

            entity.ToTable("tbl_request_detail_sample_design");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.RequestDetailId).HasColumnName("request_detail_id");
            entity.Property(e => e.SampleDesignId).HasColumnName("sample_design_id");

            entity.HasOne(d => d.RequestDetail).WithMany(p => p.TblRequestDetailSampleDesigns)
                .HasForeignKey(d => d.RequestDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_request_detail_sample_design_request_detail_id");

            entity.HasOne(d => d.SampleDesign).WithMany(p => p.TblRequestDetailSampleDesigns)
                .HasForeignKey(d => d.SampleDesignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_request_detail_sample_design_sample_design_id");
        });

        modelBuilder.Entity<TblSampleDesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_sample_design_id_primary");

            entity.ToTable("tbl_sample_design");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApprovedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("approved_by");
            entity.Property(e => e.ApprovedTime)
                .HasColumnType("datetime")
                .HasColumnName("approved_time");
            entity.Property(e => e.ContentText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("content_text");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.File)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("file");
            entity.Property(e => e.ImgId).HasColumnName("img_id");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.UpdatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("updated_by");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");

            entity.HasOne(d => d.Img).WithMany(p => p.TblSampleDesigns)
                .HasForeignKey(d => d.ImgId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_sample_design_img_id");
        });

        modelBuilder.Entity<TblStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_status_id_primary");

            entity.ToTable("tbl_status");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.DesignId).HasColumnName("design_id");
            entity.Property(e => e.EvidenceFile)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("evidence_file");
            entity.Property(e => e.EvidenceText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("evidence_text");
            entity.Property(e => e.IsCurrent).HasColumnName("is_current");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsFinal).HasColumnName("is_final");
            entity.Property(e => e.OrderStatusName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("order_status_name");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");

            entity.HasOne(d => d.Design).WithMany(p => p.TblStatuses)
                .HasForeignKey(d => d.DesignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_status_design_id");
        });

        modelBuilder.Entity<TblSuggestionDoc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_suggestion_doc_id_primary");

            entity.ToTable("tbl_suggestion_doc");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApprovedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("approved_by");
            entity.Property(e => e.ApprovedTiem)
                .HasColumnType("datetime")
                .HasColumnName("approved_tiem");
            entity.Property(e => e.ContentText)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("content_text");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedTime)
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.File)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("file");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsFirstItem).HasColumnName("is_first_item");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.RequestDetailId).HasColumnName("request_detail_id");
            entity.Property(e => e.SampleDesignId).HasColumnName("sample_design_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");

            entity.HasOne(d => d.Feedback).WithMany(p => p.TblSuggestionDocs)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_suggestion_doc_feedback_id");

            entity.HasOne(d => d.RequestDetail).WithMany(p => p.TblSuggestionDocs)
                .HasForeignKey(d => d.RequestDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_suggestion_doc_request_detail_id");

            entity.HasOne(d => d.SampleDesign).WithMany(p => p.TblSuggestionDocs)
                .HasForeignKey(d => d.SampleDesignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tbl_suggestion_doc_sample_design_id");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tbl_user_id_primary");

            entity.ToTable("tbl_user");

            entity.HasIndex(e => e.Email, "tbl_user_email_unique").IsUnique();

            entity.HasIndex(e => e.PhoneNumber, "tbl_user_phone_number_unique").IsUnique();

            entity.HasIndex(e => e.Username, "tbl_user_username_unique").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.AvatarImg)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("avatar_img");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("('NOW')")
                .HasColumnType("datetime")
                .HasColumnName("created_time");
            entity.Property(e => e.DateOfBirth).HasColumnName("date_of_birth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("first_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("last_name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("phone_number");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UpdatedTime)
                .HasColumnType("datetime")
                .HasColumnName("updated_time");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}